/*! 
 *  \brief     User Interface library
 *  \details   This module implements communication with a UI over UART1
 *  \author    Krzysztof Herman
 *  \version   1.0
 *  \date      2022
 *  \pre       First initialize the system.
 *  \copyright Krzysztof Herman
 */
#ifndef _UI_H_
#define _UI_H_

#include <stdint.h>
#include "stm32f1xx_hal.h"




/**
 * \brief   The UI expects this value to be send by PC to enter "GetParams" state and send the data to the PC
 */
#define GetParamsByte 0x80

/**
 * \brief   The UI expects this value to be send by PC to enter "SetParams" state and set the parameters
 */
#define SetParamsByte 0x81

/**
 * \brief   The maximum buffer length used for UI
 */
#define UI_Buff_Size  256

/**
 * \brief   The output start frame delimiter '~'
 */
#define OutputFrameStartDelimiter  0x7E

/**
 * \brief   The stop delimiter '*' of the frame
 */
#define FrameStopDelimiter  0x2a

/**
 * \brief   The input frame start delimiter '$' 
 */
#define InputFrameStartDelimiter  0x24

/**
 * \brief   The function sends to the PC a frame (string) that contains booth: system data and measured data
 * \details FRAME Definition
 * ~,Timestamp, MeasurementIndex, Temperature, Vbat, Vsol, Cbat, Csol, DigitalIn, Alerts, VbatMin, VbatMax, VsolMin, VsolMax, CbatMin, CbatMax, CsolMin, CsolMax,*
 */
void UI_SendMeasurements(void);

/**
 * \brief   The function sets paramaters sent byPC in a FRAME (string)
 * \details FRAME Definition
 *$VbatMin, value,*
 *$VbatMax, value,*
 *$VsolMin, value,*
 *$VsolMax, value,*
 *$CbatMin, value,*
 *$CbatMax, value,*
 *$CbatMin, value,*
 *$CsolMax, value,*
 *$CsolMin, value,*
 */



/**
 * \brief   The function sends to the PC a frame (string) that alerts
 * \details FRAME Definition
 * ~,Timestamp, VbatMin, value,*
 * ~,Timestamp, VbatMax, value,*
 * ~,Timestamp, VsolMin, value,*
 * ~,Timestamp, VsolMax, value,*
 * ~,Timestamp, CbatMin, value,*
 * ~,Timestamp, CbatMax, value,*
 * ~,Timestamp, CsolMin, value,*
 * ~,Timestamp, CsolMax, value,*
 * ~,Timestamp, DigitalIn, value,*
 */
void UI_SendAlerts(void);

/**
 * \brief   The function is called by IDLE IRQ generated by UART1
 * \details It detects if the incoming data was a single byte or a frame 
 */
void UI_UART_IDLECallback(UART_HandleTypeDef *huart, DMA_HandleTypeDef *dma);




void UI_SetParams(void);


#define UIBuffLength 256
typedef struct 
{
	uint8_t	    rxBuffer[UIBuffLength];
	uint16_t	rxIndex;
	uint8_t	    rxTmp;	
	uint32_t	LastTime;	


    //--BLINK CODES
    uint8_t NumRITMO;
    uint16_t Periodo_T;
    uint16_t Duty; //percentage (%)
    uint16_t FL01;
    uint16_t SC01;
    uint16_t FL02;
    uint16_t FL03;	
    uint16_t FL04;
    uint16_t FL05;		
    uint16_t FL06;	
    uint16_t FL07;	
    uint16_t FL08;	
    uint16_t FL09;	
    uint16_t FL10;	
    uint16_t FL11;	
    uint16_t FL12;
    uint16_t _0SC01;
    uint16_t _0SC02;
    uint16_t _0SC03;
    uint16_t _0SC04;
    uint16_t _0SC05;
    uint16_t _0SC06;
    uint16_t _0SC07;
    uint16_t _0SC08;
    uint16_t _0SC09;
    uint16_t _0SC10;
    uint16_t _0SC11;
    uint16_t _0SC12;
    
	
}UI_SetParams_t;


 typedef struct{
    
    int8_t VbatHiAlarm;
    int8_t VbatLoAlarm;
    int8_t CbatHiAlarm;
    int8_t CbatLoAlarm;

    int8_t VsolHiAlarm;
    int8_t VsolLoAlarm;
    int8_t CsolHiAlarm;
    int8_t CsolLoAlarm;
 }
 
 HATypeDefAlarms; 


void define_initial_limits(void);

#endif 